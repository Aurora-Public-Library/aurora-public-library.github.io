"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.composeAddToShelfEvent = composeAddToShelfEvent;
exports.composeBackToShelvesEvent = composeBackToShelvesEvent;
exports.composeRemoveFromShelfEvent = composeRemoveFromShelfEvent;
exports.composeShelfAvailabilitySearchEvent = composeShelfAvailabilitySearchEvent;
exports.composeShelfEvent = composeShelfEvent;
exports.composeUpdateShelfEvent = composeUpdateShelfEvent;
exports.default = void 0;

var _constantsAnalytics = _interopRequireDefault(require("@bibliocommons/constants-analytics"));

var _kebabCase = _interopRequireDefault(require("lodash/kebabCase"));

var _compose = require("./compose");

var SHELVES = _constantsAnalytics.default.CATEGORIES.SHELVES;
var _analyticsConstants$E = _constantsAnalytics.default.EVENTS,
    ADD_TO_SHELF = _analyticsConstants$E.ADD_TO_SHELF,
    MOVE_TO_SHELF = _analyticsConstants$E.MOVE_TO_SHELF,
    REMOVE_FROM_SHELF = _analyticsConstants$E.REMOVE_FROM_SHELF,
    TOGGLE_PRIVACY_EVENT = _analyticsConstants$E.TOGGLE_PRIVACY_EVENT,
    SHELF_AVAILABILITY_SEARCH = _analyticsConstants$E.SHELF_AVAILABILITY_SEARCH,
    BACK_TO_SHELVES = _analyticsConstants$E.BACK_TO_SHELVES;
var _analyticsConstants$A = _constantsAnalytics.default.ACTIONS,
    ADD_CONTENT = _analyticsConstants$A.ADD_CONTENT,
    MOVE_CONTENT = _analyticsConstants$A.MOVE_CONTENT,
    REMOVE_CONTENT = _analyticsConstants$A.REMOVE_CONTENT,
    TOGGLE_PRIVACY = _analyticsConstants$A.TOGGLE_PRIVACY,
    FIND_AVAILABLE = _analyticsConstants$A.FIND_AVAILABLE,
    CLICK_LINK = _analyticsConstants$A.CLICK_LINK;

function composeShelfEvent(eventName, metadataIds, shelfName, action) {
  return (0, _compose.composeEvent)(eventName, {
    gtmValue: metadataIds.length,
    gtmLabel: shelfName,
    gtmCategory: SHELVES,
    gtmAction: action,
    metadataIds: metadataIds
  });
}

function composeAddToShelfEvent(metadataIds, shelfName) {
  return (0, _compose.composeAnalytics)([composeShelfEvent(ADD_TO_SHELF, metadataIds, shelfName, ADD_CONTENT)]);
}

function composeRemoveFromShelfEvent(metadataIds, shelfName) {
  return (0, _compose.composeAnalytics)([composeShelfEvent(REMOVE_FROM_SHELF, metadataIds, shelfName, REMOVE_CONTENT)]);
}

function composeUpdateShelfEvent(metadataIds, fromShelfName, toShelfName, toPrivateItem) {
  var events = [];

  if (fromShelfName && toShelfName && fromShelfName !== toShelfName) {
    events.push(composeShelfEvent(MOVE_TO_SHELF, metadataIds, toShelfName, MOVE_CONTENT));
  } else if (toPrivateItem !== undefined && toPrivateItem !== null) {
    var label = toPrivateItem ? 'private' : 'public';
    events.push(composeShelfEvent(TOGGLE_PRIVACY_EVENT, metadataIds, label, TOGGLE_PRIVACY));
  }

  return (0, _compose.composeAnalytics)(events);
}

function composeShelfAvailabilitySearchEvent(shelfItemsCount, shelfName) {
  return (0, _compose.composeAnalytics)([(0, _compose.composeEvent)(SHELF_AVAILABILITY_SEARCH, {
    gtmValue: shelfItemsCount,
    gtmLabel: (0, _kebabCase.default)(shelfName),
    gtmCategory: SHELVES,
    gtmAction: FIND_AVAILABLE
  })]);
}

function composeBackToShelvesEvent() {
  return (0, _compose.composeAnalytics)([(0, _compose.composeEvent)(BACK_TO_SHELVES, {
    gtmValue: 1,
    gtmLabel: 'back-to-shelves',
    gtmCategory: SHELVES,
    gtmAction: CLICK_LINK
  })]);
}

var _default = {
  composeShelfEvent: composeShelfEvent,
  composeAddToShelfEvent: composeAddToShelfEvent,
  composeRemoveFromShelfEvent: composeRemoveFromShelfEvent,
  composeUpdateShelfEvent: composeUpdateShelfEvent,
  composeShelfAvailabilitySearchEvent: composeShelfAvailabilitySearchEvent,
  composeBackToShelvesEvent: composeBackToShelvesEvent
};
exports.default = _default;