"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _baseIcons = require("@bibliocommons/base-icons");

var _bcPropTypes = require("@bibliocommons/bc-prop-types");

var _utilsHtml = require("@bibliocommons/utils-html");

require("../styles/Button.scss");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Button = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _cn;

  function handleClick(e) {
    if (props.isLoading) {
      e.preventDefault();
      return;
    }

    if (props.handleClick) {
      e.preventDefault();
      props.handleClick(e);
    }
  }

  function renderSpinner() {
    var isLoading = props.isLoading,
        spinnerPrimary = props.spinnerPrimary;
    return isLoading && /*#__PURE__*/_react.default.createElement(_baseIcons.Spinner, {
      className: "button__spinner",
      primary: spinnerPrimary
    });
  }

  function renderLeadingIcon() {
    return props.renderLeadingIcon && /*#__PURE__*/_react.default.createElement("span", {
      className: "button__leading-icon"
    }, props.renderLeadingIcon());
  }

  function renderTrailingIcon() {
    return props.renderTrailingIcon && /*#__PURE__*/_react.default.createElement("span", {
      className: "button__trailing-icon"
    }, props.renderTrailingIcon());
  }

  function renderContents() {
    var isLoading = props.isLoading,
        loadingText = props.loadingText,
        showLoadingText = props.showLoadingText,
        children = props.children;
    var loadingContent = showLoadingText && !loadingText ? children : loadingText;

    if (isLoading && loadingContent) {
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "button__loading__content"
      }, renderLeadingIcon(), loadingContent, renderTrailingIcon());
    }

    var contentClassNames = (0, _classnames.default)('button__content', {
      'button__content--hidden': isLoading
    });
    return /*#__PURE__*/_react.default.createElement("span", {
      className: contentClassNames
    }, renderLeadingIcon(), children, renderTrailingIcon());
  }

  var className = props.className,
      block = props.block,
      rounded = props.rounded,
      disabled = props.disabled,
      size = props.size,
      leftAligned = props.leftAligned,
      rightAligned = props.rightAligned,
      dataKey = props.dataKey,
      Tag = props.tagName;
  var classNames = (0, _classnames.default)('cp-button', className, (_cn = {
    'button--block': block,
    'button--rounded': rounded,
    'button--left-aligned': leftAligned,
    'button--right-aligned': rightAligned
  }, _cn["button--" + size] = !!size, _cn));
  return /*#__PURE__*/_react.default.createElement(Tag, (0, _extends2.default)({
    ref: ref
  }, (0, _utilsHtml.getValidHtmlAttributes)(props, Tag), {
    disabled: disabled,
    onClick: handleClick,
    className: classNames,
    "data-key": dataKey
  }), renderContents(), renderSpinner());
});
Button.propTypes = {
  className: _propTypes.default.string,
  handleClick: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  children: _bcPropTypes.childrenShape.isRequired,
  loadingText: _bcPropTypes.childrenShape,
  showLoadingText: _propTypes.default.bool,
  isLoading: _propTypes.default.bool,
  tagName: _propTypes.default.string,
  spinnerPrimary: _propTypes.default.bool,
  renderLeadingIcon: _propTypes.default.func,
  renderTrailingIcon: _propTypes.default.func,
  block: _propTypes.default.bool,
  rounded: _propTypes.default.bool,
  leftAligned: _propTypes.default.bool,
  rightAligned: _propTypes.default.bool,
  dataKey: _propTypes.default.string,
  size: _propTypes.default.oneOf(['default', 'small', 'large', 'xlarge'], 'default')
};
Button.defaultProps = {
  tagName: 'button'
};
var _default = Button;
exports.default = _default;