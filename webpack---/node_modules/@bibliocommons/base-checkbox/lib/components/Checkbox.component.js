"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _baseScreenReaderMessage = _interopRequireDefault(require("@bibliocommons/base-screen-reader-message"));

var _utilsHtml = require("@bibliocommons/utils-html");

var _baseIcons = require("@bibliocommons/base-icons");

require("../styles/Checkbox.scss");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Checkbox(props) {
  var _useState = (0, _react.useState)(props.checked),
      checked = _useState[0],
      setChecked = _useState[1];

  var id = props.id,
      className = props.className,
      dataKey = props.dataKey,
      label = props.label,
      name = props.name,
      value = props.value,
      srOnlyLabel = props.srOnlyLabel;
  var classNames = (0, _classnames.default)('cp-checkbox', className);
  (0, _react.useEffect)(function () {
    setChecked(props.checked);
  }, [props.checked, setChecked]);

  function handleChange() {
    setChecked(!checked);
    props.handleChange(!checked, {
      name: name,
      value: value
    });
  }

  function renderLabel() {
    var checkboxLabel = /*#__PURE__*/_react.default.createElement("span", {
      className: "checkbox__label"
    }, label);

    if (srOnlyLabel) {
      return /*#__PURE__*/_react.default.createElement(_baseScreenReaderMessage.default, null, checkboxLabel);
    }

    return checkboxLabel;
  }

  return /*#__PURE__*/_react.default.createElement("label", {
    className: classNames,
    htmlFor: id
  }, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({}, (0, _utilsHtml.getValidHtmlAttributes)(props, 'input'), {
    checked: checked,
    "data-key": dataKey,
    type: "checkbox",
    className: "checkbox__input",
    onChange: handleChange
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: "checkbox__square"
  }, /*#__PURE__*/_react.default.createElement(_baseIcons.Checkmark, null)), renderLabel());
}

Checkbox.propTypes = {
  id: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  dataKey: _propTypes.default.string,
  label: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node, _propTypes.default.string]).isRequired,
  name: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  handleChange: _propTypes.default.func,
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _reactImmutableProptypes.default.map]),
  checked: _propTypes.default.bool,
  srOnlyLabel: _propTypes.default.bool
};
Checkbox.defaultProps = {
  checked: false,
  handleChange: function handleChange() {},
  disabled: false,
  srOnlyLabel: false
};
var _default = Checkbox;
exports.default = _default;