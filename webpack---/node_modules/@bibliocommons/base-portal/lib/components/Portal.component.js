"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _bcPropTypes = require("@bibliocommons/bc-prop-types");

var _baseAccessibilityManageFocus = _interopRequireDefault(require("@bibliocommons/base-accessibility-manage-focus"));

var _PortalContext = _interopRequireDefault(require("./PortalContext"));

require("../styles/Portal.scss");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function usePrevious(value) {
  var ref = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    ref.current = value;
  });
  return ref.current;
}

var Portal = (0, _baseAccessibilityManageFocus.default)(function (props) {
  var portalRef = (0, _react.useRef)();
  var prevProps = usePrevious(props);
  var portalContext = (0, _react.useContext)(_PortalContext.default);

  var _useState = (0, _react.useState)(),
      targetNode = _useState[0],
      setTargetNode = _useState[1];

  var captureFocus = props.captureFocus,
      restoreFocus = props.restoreFocus,
      focusTrapActive = props.focusTrapActive;
  var classNames = (0, _classnames.default)('cp-portal', portalContext.namespace);
  (0, _react.useEffect)(function () {
    if (!targetNode) {
      setTargetNode(document.body);
    }

    if (targetNode) {
      if (focusTrapActive && portalRef.current) {
        captureFocus(portalRef.current);
        targetNode.setAttribute('data-focus-trapped', true); // Hide the main content from screen readers when focus-trap is activated
        // NOTE: This does not hide other portals that may be on the page.

        Array.from(document.body.children).forEach(function (node) {
          if (!node.hasAttribute('aria-hidden') && !node.classList.contains('cp-portal')) {
            node.setAttribute('aria-hidden', true);
            node.setAttribute('data-aria-hidden-added', true);
          }
        });
      } else if (prevProps.focusTrapActive) {
        restoreFocus();
        targetNode.removeAttribute('data-focus-trapped'); // Remove 'aria-hidden' attributes from the main content when focus-trap is deactivated

        Array.from(document.body.children).forEach(function (node) {
          if (node.hasAttribute('data-aria-hidden-added')) {
            node.removeAttribute('data-aria-hidden-added');
            node.removeAttribute('aria-hidden');
          }
        });
      }
    }
  }, [targetNode, focusTrapActive, restoreFocus, captureFocus, prevProps]);

  if (targetNode) {
    return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_react.default.createElement("div", {
      className: classNames,
      ref: portalRef
    }, props.children), targetNode);
  }

  return null;
});
Portal.propTypes = {
  children: _bcPropTypes.childrenShape.isRequired,
  focusTrapActive: _propTypes.default.bool
};
var _default = Portal;
exports.default = _default;