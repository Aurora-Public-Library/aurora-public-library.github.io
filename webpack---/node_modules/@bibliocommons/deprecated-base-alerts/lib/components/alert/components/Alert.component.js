"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _baseScreenReaderMessage = _interopRequireDefault(require("@bibliocommons/base-screen-reader-message"));

var _dismiss = _interopRequireDefault(require("../../dismiss"));

require("../styles/Alert.scss");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var SHOW_ARIA_MESSAGE_TIMEOUT = 100;

function renderAriaMessage(content) {
  return /*#__PURE__*/_react.default.createElement("div", {
    role: "alert",
    "aria-live": "polite",
    "aria-atomic": "true"
  }, /*#__PURE__*/_react.default.createElement(_baseScreenReaderMessage.default, null, content));
}

var Alert = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2.default)(Alert, _React$PureComponent);

  var _super = _createSuper(Alert);

  function Alert(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Alert);
    _this = _super.call(this, props);
    _this.state = {
      showAriaMessage: false
    };
    return _this;
  }

  (0, _createClass2.default)(Alert, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      // NVDA only announces live regions which are added to the DOM directly.
      // For example, it does not work if a div _containing_ an aria-live region is added.
      // Adding the live region after a timeout ensures it's added separately from the element that contains it.
      this._intervalId = setTimeout(function () {
        return _this2.setState({
          showAriaMessage: true
        });
      }, SHOW_ARIA_MESSAGE_TIMEOUT);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this._intervalId);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          renderIcon = _this$props.renderIcon,
          handleDismiss = _this$props.handleDismiss,
          children = _this$props.children;
      var showAriaMessage = this.state.showAriaMessage;
      var classNames = "alert cp-deprecated-alert " + className;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: classNames
      }, renderIcon && /*#__PURE__*/_react.default.createElement("span", {
        className: "alert-icon"
      }, renderIcon()), /*#__PURE__*/_react.default.createElement("div", {
        className: "alert-content",
        "aria-hidden": "true"
      }, children), showAriaMessage && renderAriaMessage(children), handleDismiss && /*#__PURE__*/_react.default.createElement(_dismiss.default, {
        handleDismiss: handleDismiss
      }));
    }
  }]);
  return Alert;
}(_react.default.PureComponent);

exports.default = Alert;
Alert.propTypes = {
  className: _propTypes.default.string,
  renderIcon: _propTypes.default.func,
  handleDismiss: _propTypes.default.func,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node])
};
Alert.defaultProps = {
  className: ''
};