"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactIntl = require("react-intl");

var _baseIcons = require("@bibliocommons/base-icons");

var _baseLinks = require("@bibliocommons/base-links");

var _utilsReact = require("@bibliocommons/utils-react");

var _baseScreenReaderMessage = _interopRequireDefault(require("@bibliocommons/base-screen-reader-message"));

var _classnames = _interopRequireDefault(require("classnames"));

require("../styles/ExpandLink.scss");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function getIcon(expanded) {
  return expanded ? /*#__PURE__*/_react.default.createElement(_baseIcons.ChevronUp, null) : /*#__PURE__*/_react.default.createElement(_baseIcons.ChevronDown, null);
}

function defaultRenderLabel(expanded, textKey) {
  var labelKey = expanded ? 'button_show_less' : 'button_show_more';
  return /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("span", {
    "aria-hidden": true
  }, /*#__PURE__*/_react.default.createElement(_reactIntl.FormattedMessage, {
    id: labelKey
  })), /*#__PURE__*/_react.default.createElement(_baseScreenReaderMessage.default, null, /*#__PURE__*/_react.default.createElement(_reactIntl.FormattedMessage, {
    id: labelKey + "_" + textKey
  })));
}

var ExpandLink = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2.default)(ExpandLink, _React$PureComponent);

  var _super = _createSuper(ExpandLink);

  function ExpandLink(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ExpandLink);
    _this = _super.call(this, props);
    (0, _utilsReact.bindAll)((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(ExpandLink, [{
    key: "handleClick",
    value: function handleClick() {
      this.props.handleToggle();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          expanded = _this$props.expanded,
          renderLabel = _this$props.renderLabel,
          hideIcon = _this$props.hideIcon,
          href = _this$props.href,
          textKey = _this$props.textKey;
      var classNames = (0, _classnames.default)('cp-expand-link', className);
      return /*#__PURE__*/_react.default.createElement(_baseLinks.Link, {
        "aria-expanded": expanded,
        className: classNames,
        href: href,
        handleClick: this.handleClick,
        dataKey: "expand-link",
        preventDefault: true
      }, renderLabel(expanded, textKey), !hideIcon && getIcon(expanded));
    }
  }]);
  return ExpandLink;
}(_react.default.PureComponent);

exports.default = ExpandLink;
ExpandLink.propTypes = {
  expanded: _propTypes.default.bool.isRequired,
  handleToggle: _propTypes.default.func.isRequired,
  renderLabel: _propTypes.default.func,
  hideIcon: _propTypes.default.bool,
  href: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  textKey: _propTypes.default.string
};
ExpandLink.defaultProps = {
  renderLabel: defaultRenderLabel
};