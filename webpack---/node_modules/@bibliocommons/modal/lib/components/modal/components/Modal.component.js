"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactIntl = require("react-intl");

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactTransitionGroup = require("react-transition-group");

var _basePortal = _interopRequireDefault(require("@bibliocommons/base-portal"));

var _utilsReact = require("@bibliocommons/utils-react");

var _utilsBrowser = require("@bibliocommons/utils-browser");

var _baseScreenReaderMessage = _interopRequireDefault(require("@bibliocommons/base-screen-reader-message"));

var _bcPropTypes = require("@bibliocommons/bc-prop-types");

var _baseButtons = require("@bibliocommons/base-buttons");

var _baseIcons = require("@bibliocommons/base-icons");

var _context = _interopRequireDefault(require("@bibliocommons/context"));

require("../styles/Modal.scss");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ESCAPE_KEY_NAME = 'Escape';
var ESCAPE_KEY_CODE = 27;

function close() {
  window.history.back();
}

function closeOnEscape(e) {
  if (e.key === ESCAPE_KEY_NAME || e.which === ESCAPE_KEY_CODE) {
    close();
  }
}

var Modal = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2.default)(Modal, _React$PureComponent);

  var _super = _createSuper(Modal);

  function Modal(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Modal);
    _this = _super.call(this, props);
    _this.modalId = (0, _uniqueId.default)('modalId');
    (0, _utilsReact.bindAll)((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var open = this.props.open;

      if (open) {
        this.handleToggle(open);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.open !== prevProps.open) {
        this.handleToggle(this.props.open);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.handleToggle(false);
    }
  }, {
    key: "closeOnPopState",
    value: function closeOnPopState() {
      if (this.props.open) {
        this.props.handleClose();
      }
    }
  }, {
    key: "closeOnDocumentClick",
    value: function closeOnDocumentClick(e) {
      // If clicking outside the modal's content, call the close handler
      var contentIsTarget = this.modalBody && this.modalBody.contains(e.target);

      if (document.body.contains(e.target) && !contentIsTarget) {
        close();
      }
    }
  }, {
    key: "handleToggle",
    value: function handleToggle(open) {
      // Add the event listener on open, and remove on close
      var handleEventListener = open ? 'addEventListener' : 'removeEventListener';
      document[handleEventListener]('click', this.closeOnDocumentClick, true);
      document[handleEventListener]('keydown', closeOnEscape, true);
      window[handleEventListener]('popstate', this.closeOnPopState);
      var handleClass = open ? 'add' : 'remove';
      document.documentElement.classList[handleClass]('modal-is-open');

      if (open) {
        window.history.pushState(_objectSpread(_objectSpread({}, (0, _utilsBrowser.getHistoryState)()), {}, {
          modalId: this.modalId
        }), '');
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _cn,
          _this2 = this;

      var _this$props = this.props,
          _this$props$open = _this$props.open,
          open = _this$props$open === void 0 ? false : _this$props$open,
          className = _this$props.className,
          bodyClassName = _this$props.bodyClassName,
          children = _this$props.children,
          dataKey = _this$props.dataKey,
          size = _this$props.size;
      var classNames = (0, _classnames.default)('cp-modal', className);
      var bodyClassNames = (0, _classnames.default)('modal__body', bodyClassName, (_cn = {}, _cn["modal__body--" + size] = !!size, _cn));
      return /*#__PURE__*/_react.default.createElement(_basePortal.default, {
        focusTrapActive: open
      }, /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
        in: open,
        classNames: "modal-fade",
        timeout: {
          enter: 150,
          exit: 75
        },
        mountOnEnter: true,
        unmountOnExit: true
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: classNames,
        role: "dialog",
        "aria-hidden": !open,
        "data-key": dataKey
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: bodyClassNames,
        ref: function ref(el) {
          return _this2.modalBody = el;
        }
      }, /*#__PURE__*/_react.default.createElement("div", null, children), !this.context.mobileApp && /*#__PURE__*/_react.default.createElement(_baseButtons.IconButton, {
        dataKey: "modal-close",
        className: "modal__body__close",
        handleClick: close
      }, /*#__PURE__*/_react.default.createElement(_baseIcons.Close, null), /*#__PURE__*/_react.default.createElement(_baseScreenReaderMessage.default, null, /*#__PURE__*/_react.default.createElement(_reactIntl.FormattedMessage, {
        id: "close_modal"
      })))))));
    }
  }]);
  return Modal;
}(_react.default.PureComponent);

Modal.defaultProps = {
  size: 'default'
};
Modal.propTypes = {
  className: _propTypes.default.string,
  bodyClassName: _propTypes.default.string,
  handleClose: _propTypes.default.func.isRequired,
  children: _bcPropTypes.childrenShape.isRequired,
  dataKey: _propTypes.default.string,
  open: _propTypes.default.bool,
  size: _propTypes.default.oneOf(['default', 'small', 'large'])
};
Modal.contextType = _context.default;
var _default = Modal;
exports.default = _default;