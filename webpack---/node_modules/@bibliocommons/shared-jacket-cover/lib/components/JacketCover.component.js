"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _immutable = _interopRequireDefault(require("immutable"));

var _utilsFormat = _interopRequireDefault(require("@bibliocommons/utils-format"));

var _classnames = _interopRequireDefault(require("classnames"));

require("../styles/JacketCover.scss");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function isProtocolSupported(url) {
  var protocolList = ['http://', 'https://'];
  return protocolList.some(function (protocol) {
    return url.indexOf(protocol) !== -1;
  });
}

var JacketCover = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2.default)(JacketCover, _React$PureComponent);

  var _super = _createSuper(JacketCover);

  function JacketCover(props) {
    var _this;

    (0, _classCallCheck2.default)(this, JacketCover);
    _this = _super.call(this, props);
    _this.testImage = null;
    _this.state = {
      imgSrc: null,
      src: null
    };
    return _this;
  }

  (0, _createClass2.default)(JacketCover, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.validateImage();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!_immutable.default.is(this.props.src, prevProps.src)) {
        this.validateImage();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.testImage) {
        this.testImage.onload = undefined;
        this.testImage.onerror = undefined;
      }
    }
  }, {
    key: "getSourceImage",
    value: function getSourceImage() {
      if (typeof this.props.src === 'string') {
        if (isProtocolSupported(this.props.src)) {
          return [this.props.src];
        }
      }

      if (_immutable.default.Iterable.isIterable(this.props.src)) {
        var urlList = (0, _compact2.default)([this.props.src.get('local_url'), this.props.src.get(this.props.size)]);

        if (urlList.length && isProtocolSupported(urlList[0])) {
          return urlList;
        }
      }

      return [];
    }
  }, {
    key: "validateImage",
    value: function validateImage() {
      var _this2 = this;

      var currentImageIndex = 0;
      var src = this.getSourceImage();

      if (src.length > 0) {
        this.testImage = new Image();

        this.testImage.onload = function () {
          if (_this2.testImage.width > 1 && _this2.testImage.height > 1) {
            _this2.setState({
              imgSrc: _this2.testImage.src
            });
          }

          currentImageIndex += 1;
        };

        this.testImage.onerror = function () {
          if (src.length > currentImageIndex + 1) {
            currentImageIndex += 1;
            _this2.testImage.src = src[currentImageIndex];
          }
        };

        this.testImage.src = src[0];
      }
    }
  }, {
    key: "renderDefault",
    value: function renderDefault() {
      if (this.props.renderDefault) {
        return this.props.renderDefault();
      }

      return this.renderImage(_utilsFormat.default.getDefaultImage(this.props.format));
    }
  }, {
    key: "renderImage",
    value: function renderImage(src) {
      var jacketClass = (0, _classnames.default)('cp-jacket-cover', {
        'img-responsive': this.props.responsive,
        'drop-shadow': this.props.dropShadow
      });
      return /*#__PURE__*/_react.default.createElement("img", {
        alt: this.props.alt || '',
        src: src,
        className: jacketClass,
        "data-test-id": this.props.testId,
        loading: this.props.loadingMode
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.imgSrc) {
        return this.renderImage(this.state.imgSrc);
      }

      return this.renderDefault();
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var src = props.src;
      return !_immutable.default.is(state.src, src) ? {
        imgSrc: null,
        src: src
      } : {
        src: src
      };
    }
  }]);
  return JacketCover;
}(_react.default.PureComponent);

JacketCover.propTypes = {
  format: _propTypes.default.string,
  src: _propTypes.default.oneOfType([_propTypes.default.string, _reactImmutableProptypes.default.map, _reactImmutableProptypes.default.mapOf({
    local_url: _propTypes.default.string,
    large: _propTypes.default.string,
    medium: _propTypes.default.string,
    small: _propTypes.default.string,
    type: _propTypes.default.string
  })]),
  dropShadow: _propTypes.default.bool,
  size: _propTypes.default.string,
  responsive: _propTypes.default.bool,
  testId: _propTypes.default.string,
  renderDefault: _propTypes.default.func,
  alt: _propTypes.default.string,
  loadingMode: _propTypes.default.string
};
JacketCover.defaultProps = {
  size: 'medium',
  responsive: false,
  dropShadow: false,
  loadingMode: 'lazy'
};
var _default = JacketCover;
exports.default = _default;