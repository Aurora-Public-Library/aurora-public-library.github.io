"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactIntl = require("react-intl");

var _alerts = require("@bibliocommons/alerts");

var _utilsReact = require("@bibliocommons/utils-react");

var _baseCharacterCount = _interopRequireDefault(require("@bibliocommons/base-character-count"));

var _utilsHtml = require("@bibliocommons/utils-html");

require("../styles/TextArea.scss");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TextArea = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2.default)(TextArea, _React$PureComponent);

  var _super = _createSuper(TextArea);

  function TextArea(props) {
    var _this;

    (0, _classCallCheck2.default)(this, TextArea);
    _this = _super.call(this, props);
    _this.state = {
      height: '0'
    };
    (0, _utilsReact.bindAll)((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(TextArea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.fitToText) {
        this.updateHeightToFitText();
      }
    }
  }, {
    key: "getTextAreaStyle",
    value: function getTextAreaStyle() {
      var style = {};

      if (this.props.minHeight) {
        style.minHeight = this.props.minHeight;
      }

      if (this.state.height && this.props.fitToText) {
        style.height = this.state.height + "px";
        style.overflow = 'hidden';
      }

      return style;
    }
  }, {
    key: "handleChange",
    value: function handleChange() {
      var value = this._textarea.value;

      if (this.props.fitToText) {
        this.updateHeightToFitText();
      }

      if (this.props.handleChange) {
        this.props.handleChange(value);
      }
    }
  }, {
    key: "updateHeightToFitText",
    value: function updateHeightToFitText() {
      var _this2 = this;

      // Set the height to 'inherit' so scrollHeight will reflect true height of text
      // (this is necessary because the scrollHeight is not updated when text is removed)
      // See http://bdadam.com/blog/automatically-adapting-the-height-textarea.html
      this.setState({
        height: 'inherit'
      }, function () {
        var _this2$_textarea;

        _this2.setState({
          height: "" + ((_this2$_textarea = _this2._textarea) === null || _this2$_textarea === void 0 ? void 0 : _this2$_textarea.scrollHeight)
        });
      });
    }
  }, {
    key: "renderCharacterCount",
    value: function renderCharacterCount() {
      var _this$props = this.props,
          value = _this$props.value,
          suggestedMaxLength = _this$props.suggestedMaxLength,
          maxLength = _this$props.maxLength;

      if (suggestedMaxLength || maxLength) {
        return /*#__PURE__*/_react.default.createElement(_baseCharacterCount.default, {
          count: value ? value.length : 0,
          limit: suggestedMaxLength || maxLength
        });
      }

      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('cp-text-area', this.props.className, {
          'text-area--invalid': this.props.errorMessage
        }),
        "data-key": this.props.dataKey
      }, /*#__PURE__*/_react.default.createElement("label", {
        htmlFor: this.props.id
      }, this.props.label, this.props.optional && /*#__PURE__*/_react.default.createElement("span", {
        className: "text-area__label__optional"
      }, "(", /*#__PURE__*/_react.default.createElement(_reactIntl.FormattedMessage, {
        id: "optional"
      }), ")")), /*#__PURE__*/_react.default.createElement("textarea", (0, _extends2.default)({}, (0, _utilsHtml.getValidHtmlAttributes)(this.props, 'textarea'), {
        className: "text-area__textarea",
        id: this.props.id,
        ref: function ref(el) {
          _this3._textarea = el;
        },
        onChange: this.handleChange,
        "data-key": "text-area",
        style: this.getTextAreaStyle()
      })), this.props.errorMessage && /*#__PURE__*/_react.default.createElement(_alerts.ErrorAlert, null, this.props.errorMessage), this.renderCharacterCount());
    }
  }]);
  return TextArea;
}(_react.default.PureComponent);

exports.default = TextArea;
TextArea.propTypes = {
  fitToText: _propTypes.default.bool,
  maxLength: _propTypes.default.number,
  suggestedMaxLength: _propTypes.default.number,
  id: _propTypes.default.string.isRequired,
  label: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node, _propTypes.default.string]),
  errorMessage: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node, _propTypes.default.string]),
  value: _propTypes.default.string,
  handleChange: _propTypes.default.func,
  optional: _propTypes.default.bool,
  dataKey: _propTypes.default.string,
  className: _propTypes.default.string,
  minHeight: _propTypes.default.string
};
TextArea.defaultProps = {
  fitToText: false
};