"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactIntl = require("react-intl");

var _classnames = _interopRequireDefault(require("classnames"));

var _bcPropTypes = require("@bibliocommons/bc-prop-types");

require("../styles/ToggleSwitch.scss");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ToggleSwitch = function ToggleSwitch(_ref) {
  var id = _ref.id,
      className = _ref.className,
      active = _ref.active,
      handleClick = _ref.handleClick,
      activeText = _ref.activeText,
      inactiveText = _ref.inactiveText;

  var _useState = (0, _react.useState)(false),
      focused = _useState[0],
      setFocused = _useState[1];

  var classNames = (0, _classnames.default)('cp-toggle-switch', className);
  var sliderClassNames = (0, _classnames.default)('toggle-switch__slider', {
    'toggle-switch__slider--active': active
  });
  return /*#__PURE__*/_react.default.createElement("label", {
    className: classNames,
    htmlFor: id,
    "data-focused": focused
  }, /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    id: id,
    onClick: handleClick,
    onFocus: function onFocus() {
      return setFocused(true);
    },
    onBlur: function onBlur() {
      return setFocused(false);
    }
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: sliderClassNames
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "toggle-switch__text"
  }, active ? activeText : inactiveText));
};

ToggleSwitch.defaultProps = {
  activeText: /*#__PURE__*/_react.default.createElement(_reactIntl.FormattedMessage, {
    id: "on"
  }),
  inactiveText: /*#__PURE__*/_react.default.createElement(_reactIntl.FormattedMessage, {
    id: "off"
  })
};
ToggleSwitch.propTypes = {
  className: _propTypes.default.string,
  id: _propTypes.default.string.isRequired,
  active: _propTypes.default.bool.isRequired,
  handleClick: _propTypes.default.func,
  activeText: _bcPropTypes.childrenShape,
  inactiveText: _bcPropTypes.childrenShape
};
var _default = ToggleSwitch;
exports.default = _default;