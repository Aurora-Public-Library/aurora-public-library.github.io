"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _airbrakeJs = _interopRequireDefault(require("airbrake-js"));

var _detectBrowser = require("detect-browser");

var AirbrakeErrorService = /*#__PURE__*/function () {
  function AirbrakeErrorService(config) {
    if (config === void 0) {
      config = {};
    }

    (0, _classCallCheck2.default)(this, AirbrakeErrorService);
    var _config = config,
        projectKey = _config.projectKey,
        projectId = _config.projectId,
        env = _config.env,
        appVersion = _config.appVersion;
    this.client = new _airbrakeJs.default({
      projectId: projectId,
      projectKey: projectKey
    });
    this.addContextFilter({
      env: env,
      appVersion: appVersion
    });
    this.addBrowserFilter();
  }
  /*
   * Includes additional context information about the outgoing notice.
   */


  (0, _createClass2.default)(AirbrakeErrorService, [{
    key: "addContextFilter",
    value: function addContextFilter(_ref) {
      var env = _ref.env,
          appVersion = _ref.appVersion;
      this.client.addFilter(function (notice) {
        var updatedNotice = notice;
        updatedNotice.context.environment = env;
        updatedNotice.context.version = appVersion;
        return updatedNotice;
      });
    }
  }, {
    key: "addBrowserFilter",
    value: function addBrowserFilter() {
      var browser = (0, _detectBrowser.detect)();
      this.client.addFilter(function (notice) {
        var version = parseInt(browser.version, 10);

        switch (browser && browser.name) {
          case 'safari':
            // Support Desktop Safari >= 11
            return version >= 11 ? notice : null;

          case 'ie':
            // Support IE >= 11
            return version >= 11 ? notice : null;

          case 'ios':
            // Support Mobile Safari >= 11
            // We support iOS Safari 11 and above
            return version >= 11 ? notice : null;

          default:
            return notice;
        }
      });
    }
    /*
     * Notifies airbrake of the specified error.
     */

  }, {
    key: "notify",
    value: function notify(err) {
      var _this = this;

      if (!err) return Promise.reject(new Error('Undefined err object'));
      if (!this.client) return Promise.reject(new Error('Undefined service client'));
      return new Promise(function (resolve, reject) {
        _this.client.notify(err).then(function (notice) {
          return resolve(notice === null || notice === void 0 ? void 0 : notice.id);
        }, reject);
      });
    }
  }]);
  return AirbrakeErrorService;
}();

var _default = AirbrakeErrorService;
exports.default = _default;