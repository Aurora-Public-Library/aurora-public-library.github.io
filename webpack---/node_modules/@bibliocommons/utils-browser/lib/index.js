"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixedEncodeURIComponent = fixedEncodeURIComponent;
exports.getCookie = getCookie;
exports.getHistoryState = getHistoryState;
exports.getScrollTop = getScrollTop;
exports.getTextFromPasteEvent = getTextFromPasteEvent;
exports.isCurrentUrl = isCurrentUrl;
exports.isVisibleInViewPort = isVisibleInViewPort;
exports.openPopUpWindow = openPopUpWindow;
exports.postRedirect = postRedirect;
exports.setCookie = setCookie;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _cookie = require("cookie");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function isVisibleInViewPort(el) {
  var rect = el.getBoundingClientRect();
  return rect.top >= 0 || rect.bottom >= 0;
}
/**
 * Gets the value of the cookie at `key`.
 * @param  {string} key
 * @return {string}
 */


function getCookie(key) {
  if (!document) return undefined;
  return (0, _cookie.parse)(document.cookie)[key];
}
/**
 * Sets a document cookie with the given args.
 * @see https://github.com/jshttp/cookie#serialize
 *
 * @param {string} key
 * @param {string} val
 * @param {object} opts
 */


function setCookie(key, val, opts) {
  if (!document) return;
  document.cookie = (0, _cookie.serialize)(key, "" + val, opts);
}

var urlWithoutHash = function urlWithoutHash(url) {
  var hashIndex = url.lastIndexOf('#');
  return url.substring(0, hashIndex >= 0 ? hashIndex : url.length);
};
/**
 * Checks if the URL is the same as the browser's current URL
 *
 * @param {string} url
 */


function isCurrentUrl(url) {
  return urlWithoutHash(url) === urlWithoutHash(window.location.href);
}

function getTextFromPasteEvent(e) {
  if (e.clipboardData) {
    try {
      return e.clipboardData.getData('text/plain');
    } catch (err) {
      // IE11 does not support "text/plain", but does support "text".
      return e.clipboardData.getData('text');
    }
  }

  return null;
}
/**
 * Gets the current history state.
 * @return {object}
 */


function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Encodes additional special characters in the string value passed
 *
 * @param {string} str
 * Resource: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
 */


function fixedEncodeURIComponent(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
    return "%" + c.charCodeAt(0).toString(16);
  });
}

function getScrollTop() {
  if (window && document) {
    // See http://stackoverflow.com/questions/28633221/document-body-scrolltop-firefox-returns-0-only-js
    return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
  }

  return 0;
}
/**
 * Opens a new popup window on the center of screen.
 *
 * @param {object} url, target (string), windowFeatures (object)
 *
 */


function openPopUpWindow(_ref) {
  var url = _ref.url,
      _ref$target = _ref.target,
      target = _ref$target === void 0 ? '_blank' : _ref$target,
      _ref$windowFeatures = _ref.windowFeatures,
      windowFeatures = _ref$windowFeatures === void 0 ? {} : _ref$windowFeatures;
  var leftScreenOffset = window.screenLeft || window.screenX;
  var topScreenOffset = window.screenTop || window.screenY;
  var width = windowFeatures.width;
  var height = windowFeatures.height;
  var left = width ? Math.floor(leftScreenOffset + (window.outerWidth - windowFeatures.width) / 2) : 'auto';
  var top = height ? Math.floor(topScreenOffset + (window.outerHeight - windowFeatures.height) / 2) : 'auto';
  var windowFeatureDefaults = {
    resizable: 1,
    status: 0,
    toolbar: 0,
    scrollbars: 1,
    location: 0,
    menubar: 0,
    width: 'auto',
    height: 'auto',
    left: left,
    top: top
  };

  var features = _objectSpread(_objectSpread({}, windowFeatureDefaults), windowFeatures);

  features = Object.keys(features).filter(Boolean).map(function (attribute) {
    return attribute + "=" + features[attribute];
  }).join(',');
  window.open(url, target, features);
}
/**
 * Redirect using HTTP POST method.
 *
 * @param {string} url   The url to redirect to.
 * @param {object} data  The data to include in the redirect.
 */


function postRedirect(url, data) {
  if (data === void 0) {
    data = {};
  }

  var form = document.createElement('form');
  form.method = 'post';
  form.action = url;
  document.body.appendChild(form);
  Object.keys(data).forEach(function (key) {
    var input = document.createElement('input');
    input.type = 'hidden';
    input.name = key;
    input.value = data[key];
    form.appendChild(input);
  });
  form.submit();
}