"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _each2 = _interopRequireDefault(require("lodash/each"));

var _urlParse = _interopRequireDefault(require("url-parse"));

var _shouldSendSameSiteNone = require("should-send-same-site-none");

var _currentURL, _currentURL2;

/**
  Code modifed from ReactGA (https://github.com/react-ga/react-ga) to allow for
  multiple GA trackers.
 * */

/**
 * create():
 * Creates trackers and pulls down analytics.js if it is not already in the
 * window namespace.
 * @param options {object} Fields object for creating a tracker
 */
function create(options) {
  if (window && !window.ga) {
    // https://developers.google.com/analytics/devguides/collection/analyticsjs/

    /* eslint-disable */
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r;
      i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments);
      }, i[r].l = 1 * new Date();
      a = s.createElement(o), m = s.getElementsByTagName(o)[0];
      a.async = 1;
      a.src = g;
      m.parentNode.insertBefore(a, m);
    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
    /* eslint-enable */

  }

  window.ga('create', options);
}
/**
 * ga:
 * Safe passthrough wrapper for window.ga
 */


function ga() {
  if (window && window.ga) {
    return window.ga;
  }

  return undefined;
}

function sendPageviewToTrackers(path) {
  // There may be trackers from the Core header in GA's namespace. Filter out
  // any trackers that are NOT NERF-specific.
  var trackers = window.ga.getAll().filter(function (tracker) {
    var regex = /^bcNERF/;
    var name = tracker.get('name');
    return regex.test(name);
  });
  return (0, _each2.default)(trackers, function (tracker) {
    tracker.send('pageview', path);
  });
}
/**
 * pageView():
 * Send a page view event to GA for the provided path
 * @param path {string} Path to track
 */


function pageView(path) {
  if (!window || !window.ga) {
    return false;
  }

  window.ga('set', {
    page: path
  }); // GA may not be fully instantiated yet. Put the command in the command queue
  // if necessary

  if (!window.ga.getAll) {
    return window.ga(function () {
      sendPageviewToTrackers(path);
    });
  }

  return sendPageviewToTrackers(path);
}
/**
 * event():
 * Send an event object to GA
 * @param event {object} Event object to send to GA
 * @param sendToLibrary {boolean} send to library's tracker
 */


function event(eventObj, sendToLibrary) {
  if (sendToLibrary === void 0) {
    sendToLibrary = false;
  }

  var trackers = ['bcNERFTracker', sendToLibrary ? 'bcNERFLibraryTracker' : null];

  if (!window || !window.ga) {
    return false;
  }

  trackers.filter(function (tracker) {
    return !!tracker;
  }).forEach(function (tracker) {
    window.ga(tracker + ".send", 'event', eventObj);
  });
  return true;
}

function getGACrossDomainNames(library) {
  var domains = [];

  if (library.gaCrossDomainEnabled) {
    if (library.gaCrossDomainNames) {
      domains = library.gaCrossDomainNames;
    }

    if (library.cmsEnabled && library.cmsUrl) {
      var parsed = new _urlParse.default(library.cmsUrl);

      if (parsed.host) {
        domains.push(parsed.host);
      }
    }
  }

  return domains;
}

var currentURL;
if (typeof window !== 'undefined') currentURL = window.location.href;
var isEvents = ((_currentURL = currentURL) === null || _currentURL === void 0 ? void 0 : _currentURL.includes('/v2/events')) || ((_currentURL2 = currentURL) === null || _currentURL2 === void 0 ? void 0 : _currentURL2.includes('/v2/locations'));

function getExternalGAId(library) {
  var gaCrossDomainEnabled = library.gaCrossDomainEnabled,
      externalEventsGAId = library.externalEventsGAId,
      externalCoreGAId = library.externalCoreGAId;
  if (!library) return null;
  if (isEvents && !gaCrossDomainEnabled) return externalEventsGAId;
  return externalCoreGAId;
}

function initialize(internalCoreGAId, internalEventsGAId, library, currentLanguage) {
  var userAgent = window.navigator.userAgent;
  var isHttps = document.location.protocol === 'https:';
  var cookieFlags = isHttps && (0, _shouldSendSameSiteNone.isSameSiteNoneCompatible)(userAgent) ? 'SameSite=None; Secure' : '';
  var internalGaId = isEvents ? internalEventsGAId : internalCoreGAId;

  if (internalGaId) {
    create({
      trackingId: internalGaId,
      cookieDomain: 'auto',
      cookieFlags: cookieFlags,
      name: 'bcNERFTracker'
    });
    ga()('bcNERFTracker.set', 'language', currentLanguage);
    ga()('bcNERFTracker.set', 'transport', 'beacon');

    if (library && !library.allowGoogleAdFeatures) {
      ga()('bcNERFTracker.set', 'allowAdFeatures', false);
    }
  }

  var externalGAId = getExternalGAId(library);

  if (externalGAId) {
    create({
      trackingId: getExternalGAId(library),
      name: 'bcNERFLibraryTracker',
      cookieDomain: library.gaDomainName,
      cookieFlags: cookieFlags,
      allowLinker: library.gaCrossDomainEnabled
    });
    ga()('bcNERFLibraryTracker.set', 'language', currentLanguage);
    ga()('bcNERFLibraryTracker.set', 'transport', 'beacon');

    if (!library.allowGoogleAdFeatures) {
      ga()('bcNERFLibraryTracker.set', 'allowAdFeatures', false);
    }

    var gaAutolinkDomains = getGACrossDomainNames(library);

    if (gaAutolinkDomains.length) {
      /* Cross domain tracking */
      ga()('bcNERFLibraryTracker.require', 'linker');
      ga()('bcNERFLibraryTracker.linker:autoLink', gaAutolinkDomains);
    }
  }
}

var _default = {
  create: create,
  ga: ga,
  pageView: pageView,
  event: event,
  getGACrossDomainNames: getGACrossDomainNames,
  initialize: initialize
};
exports.default = _default;