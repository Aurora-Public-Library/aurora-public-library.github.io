"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValidHtmlAttributes = getValidHtmlAttributes;
exports.stripTags = void 0;
exports.truncate = truncate;

var _htmlsave = require("htmlsave/dist/htmlsave.compat");

var _reactHtmlAttributes = _interopRequireDefault(require("react-html-attributes"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _utilsString = require("@bibliocommons/utils-string");

var stripTags = _htmlsave.utils.stripTags;
exports.stripTags = stripTags;

function truncate(htmlText, charCount, ellipsis) {
  if (ellipsis === void 0) {
    ellipsis = "\u2026";
  }

  // Truncation is not needed, if the visual text count is within the limit.
  if (stripTags(htmlText).length <= charCount) {
    return htmlText;
  } // The `htmlsave` package chokes on html comments, so strip them before truncating.


  var strippedHtml = htmlText.replace(/<!--.*?-->/g, '');

  try {
    return (0, _htmlsave.truncate)(strippedHtml, charCount, {
      breakword: false,
      ellipsis: ellipsis
    });
  } catch (_unused) {
    // if the html text contains invalid syntax, default to truncating the text as a string
    return (0, _utilsString.truncate)(htmlText, {
      desiredLength: charCount
    });
  }
} // Return true iff the given attribute (e.g. "maxlength") is valid for the given HTML element (e.g. "textarea"),
// or if the attribute starts with "aria-" or "data-"


function isValidHtmlAttribute(attribute, element) {
  return attribute.startsWith('aria-') || attribute.startsWith('data-') || _reactHtmlAttributes.default['*'].includes(attribute) || _reactHtmlAttributes.default[element] && _reactHtmlAttributes.default[element].includes(attribute);
}
/* Given an object of shape { <attribute name> : <attribute value> }, and an HTML element (e.g. "textarea"),
 return a new object that contains only attributes that are valid for the given HTML element
 Example: getValidHtmlAttributes ({ maxlength: 100, invalid: 'qweqwe' }, 'textarea') => { maxlength: 100 }
 */


function getValidHtmlAttributes(attributes, element) {
  var invalidKeys = Object.keys(attributes).filter(function (key) {
    return !isValidHtmlAttribute(key, element);
  });
  return (0, _omit.default)(attributes, invalidKeys);
}