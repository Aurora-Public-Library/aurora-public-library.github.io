"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getLocaleByCurrency = getLocaleByCurrency;
exports.localizeFromKey = localizeFromKey;
exports.mapLocaleForMoment = mapLocaleForMoment;

var _has2 = _interopRequireDefault(require("lodash/has"));

/**
 * This will localize the string if the localKey is provided.
 * @param  {[type]} obj                Object which contains localKey option
 * @param  {[type]} intl               Intl helper to get the localize message
 * @param  {[type]} nonLocalizeTextKey This is the key which contains non-localize string coming from backend
 *                                     its used in the absence of localKey
 * @return {[type]}                    Localize string
 */
function localizeFromKey(obj, intl, nonLocalizeTextKey) {
  if (nonLocalizeTextKey === void 0) {
    nonLocalizeTextKey = 'text';
  }

  return (0, _has2.default)(obj, 'localeKey') ? intl.formatMessage({
    id: obj.localeKey,
    defaultMessage: nonLocalizeTextKey
  }) : obj[nonLocalizeTextKey];
}
/**
 * This will map current locale string that is compatible with Moment JS/
 * @param  {[type]} locale             Current locale string
 * @return {[type]}                    Moment JS compatible locale string
 */


function mapLocaleForMoment(locale) {
  var localMap = {
    'fil-PH': 'tl-PH'
  };
  return localMap[locale] || locale;
}
/**
 * Returns supported PayPal locale based on currency provided.
 * https://developer.paypal.com/docs/payouts/reference/country-and-currency-codes/
 * https://developer.paypal.com/docs/classic/api/locale-codes/#localization-factors
 *
 * @param  {[type]} currency supported PayPal currency.
 * @return {[type]} supported PayPal locale.
 */


function getLocaleByCurrency(currency) {
  // Note: Need to revisit logic once CORE-56959 is completed.
  var defaultLocale = 'en_US';
  var localeMap = {
    USD: defaultLocale,
    CAD: 'en_CA',
    AUD: 'en_AU',
    NZD: 'en_NZ'
  };
  return localeMap[currency] || defaultLocale;
}

var _default = {
  localizeFromKey: localizeFromKey,
  mapLocaleForMoment: mapLocaleForMoment,
  getLocaleByCurrency: getLocaleByCurrency
};
exports.default = _default;