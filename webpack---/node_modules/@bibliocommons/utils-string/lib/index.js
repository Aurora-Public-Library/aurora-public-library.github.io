"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.truncate = exports.softHyphenate = exports.chunk = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var chunk = function chunk(str, chunkSize) {
  if (chunkSize === void 0) {
    chunkSize = 5;
  }

  var results = [];
  var i;
  var len;

  for (i = 0, len = str.length; i < len; i += chunkSize) {
    results.push(str.substr(i, chunkSize));
  }

  return results;
};

exports.chunk = chunk;

var truncate = function truncate(str, userOptions) {
  var defaultOptions = {
    desiredLength: 20,
    softTruncate: true,
    showEllipsis: true
  };

  var options = _objectSpread(_objectSpread({}, defaultOptions), userOptions);

  var desiredLength = options.desiredLength,
      softTruncate = options.softTruncate,
      showEllipsis = options.showEllipsis;

  if (str.length <= desiredLength) {
    return str;
  }

  var trimmedString = str.substr(0, desiredLength);

  if (softTruncate && trimmedString.lastIndexOf(' ') > 0) {
    trimmedString = trimmedString.substr(0, Math.min(trimmedString.length, trimmedString.lastIndexOf(' ')));
  }

  return "" + trimmedString + (showEllipsis ? "\u2026" : '');
};

exports.truncate = truncate;

var softHyphenate = function softHyphenate(str, minLength, chunkSize) {
  if (minLength === void 0) {
    minLength = 10;
  }

  if (chunkSize === void 0) {
    chunkSize = 5;
  }

  var words = str.split(' ');
  return words.map(function (word) {
    if (word.length >= minLength) {
      return chunk(word, chunkSize).join("\xAD");
    }

    return word;
  }).join(' ');
};

exports.softHyphenate = softHyphenate;